// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using VBL.Data;

namespace VBL.Data.Migrations
{
    [DbContext(typeof(VBLDbContext))]
    partial class VBLDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("VBL.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<byte[]>("DtModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("LastLoginProvider");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RegistrationProvider");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserIdCreated");

                    b.Property<string>("UserIdModified");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("VBL.Data.Email", b =>
                {
                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<byte[]>("DtModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Public");

                    b.Property<string>("UserIdCreated");

                    b.Property<string>("UserIdModified");

                    b.Property<bool>("Verified");

                    b.HasKey("Address");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("VBL.Data.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<byte[]>("DtModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<bool>("Public");

                    b.Property<string>("UserIdCreated");

                    b.Property<string>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("VBL.Data.OrganizationUser", b =>
                {
                    b.Property<int>("OrganizationId");

                    b.Property<string>("UserId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<byte[]>("DtModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsActive");

                    b.Property<int>("Role");

                    b.Property<string>("UserIdCreated");

                    b.Property<string>("UserIdModified");

                    b.HasKey("OrganizationId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("OrganizationUsers");
                });

            modelBuilder.Entity("VBL.Data.PhoneNumber", b =>
                {
                    b.Property<string>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<byte[]>("DtModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Public");

                    b.Property<bool>("SMS");

                    b.Property<string>("UserIdCreated");

                    b.Property<string>("UserIdModified");

                    b.Property<bool>("Verified");

                    b.HasKey("Number");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("VBL.Data.UserEmail", b =>
                {
                    b.Property<string>("EmailId");

                    b.Property<string>("UserId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<byte[]>("DtModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserIdCreated");

                    b.Property<string>("UserIdModified");

                    b.HasKey("EmailId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("VBL.Data.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<byte[]>("DtModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Message");

                    b.Property<string>("OnClick");

                    b.Property<bool>("Seen");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("UserIdCreated");

                    b.Property<string>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("VBL.Data.UserPhoneNumber", b =>
                {
                    b.Property<string>("PhoneNumberId");

                    b.Property<string>("UserId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<byte[]>("DtModified")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserIdCreated");

                    b.Property<string>("UserIdModified");

                    b.HasKey("PhoneNumberId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("UserPhoneNumbers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VBL.Data.ApplicationUser", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.Email", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.Organization", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.OrganizationUser", b =>
                {
                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany("OrganizationUser")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.PhoneNumber", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.UserEmail", b =>
                {
                    b.HasOne("VBL.Data.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("UserEmails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.UserNotification", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.UserPhoneNumber", b =>
                {
                    b.HasOne("VBL.Data.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("UserPhoneNumbers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });
#pragma warning restore 612, 618
        }
    }
}
