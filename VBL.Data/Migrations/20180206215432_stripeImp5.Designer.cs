// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using VBL.Data;

namespace VBL.Data.Migrations
{
    [DbContext(typeof(VBLDbContext))]
    [Migration("20180206215432_stripeImp5")]
    partial class stripeImp5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("ProviderKey");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("ProviderKey", "LoginProvider");

                    b.HasAlternateKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasAlternateKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("VBL.Data.AgeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AgeTypes");
                });

            modelBuilder.Entity("VBL.Data.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("VBL.Data.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("Dob");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastLoginProvider");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RegistrationProvider");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VBL.Data.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgeTypeId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.Property<byte>("Order");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("VBL.Data.FacebookProfile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("FacebookProfiles");
                });

            modelBuilder.Entity("VBL.Data.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgeTypeId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPublic");

                    b.Property<bool?>("Male");

                    b.Property<string>("Name");

                    b.Property<byte>("Order");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("VBL.Data.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("GoogleUrl");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TimeZoneName");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("VBL.Data.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contact");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Facebook");

                    b.Property<string>("Instagram");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Snapchat");

                    b.Property<string>("Twitter");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.Property<string>("Username");

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("VBL.Data.OrganizationLocation", b =>
                {
                    b.Property<int>("OrganizationId");

                    b.Property<int>("LocationId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("OrganizationId", "LocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("OrganizationLocations");
                });

            modelBuilder.Entity("VBL.Data.OrganizationMember", b =>
                {
                    b.Property<int>("OrganizationId");

                    b.Property<int>("UserId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Role");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("OrganizationId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("OrganizationMembers");
                });

            modelBuilder.Entity("VBL.Data.OrganizationPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsCover");

                    b.Property<bool>("IsPublic");

                    b.Property<int>("OrganizationId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Url");

                    b.Property<int?>("UserCreatedId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.Property<int?>("UserModifiedId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("OrganizationPhoto");
                });

            modelBuilder.Entity("VBL.Data.OrganizationTournamentDefaults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("EmailNote");

                    b.Property<string>("ImageUrl");

                    b.Property<int>("LocationId");

                    b.Property<bool>("OneDay");

                    b.Property<int>("OrganizationId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TournamentDirectorUserId");

                    b.Property<int?>("UserCreatedId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.Property<int?>("UserModifiedId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId")
                        .IsUnique();

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserModifiedId");

                    b.ToTable("OrganizationTournamentDefaults");
                });

            modelBuilder.Entity("VBL.Data.PayPalPaymentResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acct");

                    b.Property<decimal>("Amt");

                    b.Property<string>("AuthCode");

                    b.Property<byte>("CardType");

                    b.Property<string>("CorrelationId");

                    b.Property<string>("Cvv2Match");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Pnref");

                    b.Property<string>("Ppref");

                    b.Property<string>("RespMsg");

                    b.Property<string>("Result");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SecureToken");

                    b.Property<string>("SecureTokenId");

                    b.Property<string>("TransTime");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("PayPalPaymentResponses");
                });

            modelBuilder.Entity("VBL.Data.PayPalToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<int>("PayPalTransactionId");

                    b.Property<string>("RespMsg");

                    b.Property<string>("Result");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SecureToken");

                    b.Property<string>("SecureTokenId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("PayPalTransactionId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("PayPalTokens");
                });

            modelBuilder.Entity("VBL.Data.PayPalTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("RawData");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<float>("Total");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("PayPalTransactions");
                });

            modelBuilder.Entity("VBL.Data.PlayerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AauNumber");

                    b.Property<int?>("ApplicationUserId");

                    b.Property<string>("AvpNumber");

                    b.Property<string>("CbvaNumber");

                    b.Property<string>("Club");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("Male");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UsavNumber");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.Property<string>("VblId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("PlayerProfiles");
                });

            modelBuilder.Entity("VBL.Data.PointValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DivisionId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<int>("Finish");

                    b.Property<bool>("PerTeam");

                    b.Property<int>("Points");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SanctioningBodyId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("PointValues");
                });

            modelBuilder.Entity("VBL.Data.PointValueMultiplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TournamentTeamMemberId");

                    b.Property<string>("Type");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TournamentTeamMemberId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("PointValueMultipliers");
                });

            modelBuilder.Entity("VBL.Data.SanctioningBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("SanctioningBodies");
                });

            modelBuilder.Entity("VBL.Data.SparkPostEmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("For");

                    b.Property<bool>("IsCurrent");

                    b.Property<bool>("IsDraft");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TemplateId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("SparkPostEmailTemplates");
                });

            modelBuilder.Entity("VBL.Data.StripeAccountDetails", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessLogoFileId");

                    b.Property<string>("BusinessName");

                    b.Property<string>("BusinessPrimaryColor");

                    b.Property<string>("BusinessUrl");

                    b.Property<bool>("ChargesEnabled");

                    b.Property<string>("Country");

                    b.Property<bool>("DebitNegativeBalances");

                    b.Property<string>("DefaultCurrency");

                    b.Property<bool>("DetailsSubmitted");

                    b.Property<string>("DisplayName");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Email");

                    b.Property<string>("Object");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("PayoutStatementDescriptor");

                    b.Property<bool>("PayoutsEnabled");

                    b.Property<string>("ProductDescription");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("StatementDescriptor");

                    b.Property<int>("StripeAuthTokenId");

                    b.Property<string>("SupportEmail");

                    b.Property<string>("SupportPhone");

                    b.Property<string>("SupportUrl");

                    b.Property<string>("Timezone");

                    b.Property<string>("Type");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StripeAuthTokenId")
                        .IsUnique();

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("StripeAccountDetails");
                });

            modelBuilder.Entity("VBL.Data.StripeAuthToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Error");

                    b.Property<string>("ErrorDescription");

                    b.Property<bool>("LiveMode");

                    b.Property<string>("RefreshToken");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Scope");

                    b.Property<string>("StripePublishableKey");

                    b.Property<string>("StripeUserId");

                    b.Property<string>("TokenType");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("StripeAuthTokens");
                });

            modelBuilder.Entity("VBL.Data.StripeConnectClick", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationUserId");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<int>("OrganizationId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Scope");

                    b.Property<int?>("StripeAuthTokenId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("StripeAuthTokenId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("StripeConnectClicks");
                });

            modelBuilder.Entity("VBL.Data.TeamCountMultiplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<double>("Multiplier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SanctioningBodyId");

                    b.Property<int>("TeamCap");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TeamCountMultipliers");
                });

            modelBuilder.Entity("VBL.Data.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("EmailNote");

                    b.Property<string>("ExternalRegistrationUrl");

                    b.Property<bool>("IsOrganizationApproved");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsSanctioningBodyApproved");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("SanctioningBodyId");

                    b.Property<int?>("SparkPostEmailTemplateId");

                    b.Property<int>("StatusId");

                    b.Property<int?>("TournamentDirectorUserId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SanctioningBodyId");

                    b.HasIndex("SparkPostEmailTemplateId");

                    b.HasIndex("TournamentDirectorUserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("VBL.Data.TournamentDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckInTime");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("PlayTime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TournamentDivisionId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("TournamentDivisionId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentDays");
                });

            modelBuilder.Entity("VBL.Data.TournamentDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AgeTypeId");

                    b.Property<int?>("DivisionId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<DateTime?>("DtPointCutoff");

                    b.Property<DateTime>("DtRefundCutoff");

                    b.Property<string>("EmailNote");

                    b.Property<int?>("GenderId");

                    b.Property<string>("Info");

                    b.Property<bool>("IsSanctioningBodyApproved");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("MaxTeams");

                    b.Property<int?>("MinTeams");

                    b.Property<byte>("NumAllowedOnRoster");

                    b.Property<byte>("NumOfPlayers");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SanctioningBodyId");

                    b.Property<int?>("SparkPostEmailTemplateId");

                    b.Property<int?>("TournamentDirectorUserId");

                    b.Property<int>("TournamentId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("AgeTypeId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LocationId");

                    b.HasIndex("SparkPostEmailTemplateId");

                    b.HasIndex("TournamentDirectorUserId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentDivisions");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddOnQty");

                    b.Property<bool>("Confirmed");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Notes");

                    b.Property<string>("PaymentType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TeamName");

                    b.Property<int>("TournamentDivisionId");

                    b.Property<int>("TournamentId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("TournamentDivisionId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentRegistrations");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<int>("EmailMessageId");

                    b.Property<int?>("FromEmailId");

                    b.Property<bool>("IsDefault");

                    b.Property<int>("OrganizationId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("TournamentDivisionId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TournamentDivisionId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentRegistrationEmails");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Fields");

                    b.Property<string>("RequiredFields");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TournamentDivisionId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("TournamentDivisionId")
                        .IsUnique();

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentRegistrationInfo");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AauNumber");

                    b.Property<string>("AvpNumber");

                    b.Property<string>("CbvaNumber");

                    b.Property<string>("City");

                    b.Property<string>("Club");

                    b.Property<DateTime?>("Dob");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("NeedsMatchReview");

                    b.Property<string>("Phone");

                    b.Property<int>("PlayerProfileId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("State");

                    b.Property<int?>("TournamentRegistrationId");

                    b.Property<string>("UsavNumber");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.Property<string>("VblId");

                    b.HasKey("Id");

                    b.HasIndex("PlayerProfileId");

                    b.HasIndex("TournamentRegistrationId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentRegistrationPlayers");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationWindow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanPayAtEvent");

                    b.Property<bool>("CanProcessPayment");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtEnd");

                    b.Property<DateTime?>("DtModified");

                    b.Property<DateTime?>("DtStart");

                    b.Property<double>("Fee");

                    b.Property<bool>("FeeIsPerTeam");

                    b.Property<bool>("IsEarly");

                    b.Property<bool>("IsLate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TournamentDivisionId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("TournamentDivisionId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentRegistrationWindows");
                });

            modelBuilder.Entity("VBL.Data.TournamentTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<int?>("Finish");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("Seed");

                    b.Property<int>("TournamentDivisionId");

                    b.Property<int>("TournamentRegistrationId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("TournamentDivisionId");

                    b.HasIndex("TournamentRegistrationId")
                        .IsUnique();

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentTeams");
                });

            modelBuilder.Entity("VBL.Data.TournamentTeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AauSeedingPoints");

                    b.Property<double?>("AvpSeedingPoints");

                    b.Property<double?>("CbvaSeedingPoints");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtEarned");

                    b.Property<DateTime?>("DtFinalized");

                    b.Property<DateTime?>("DtModified");

                    b.Property<DateTime?>("DtPointLock");

                    b.Property<int?>("Finish");

                    b.Property<double?>("OrganizationPointsEarned");

                    b.Property<int>("PlayerProfileId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SanctioningBodyId");

                    b.Property<int>("TournamentTeamId");

                    b.Property<double?>("UsavSeedingPoints");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.Property<double?>("VblBasePointsEarned");

                    b.Property<double?>("VblSeedingPoints");

                    b.Property<double?>("VblTotalPointsEarned");

                    b.HasKey("Id");

                    b.HasIndex("PlayerProfileId");

                    b.HasIndex("TournamentTeamId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentTeamMembers");
                });

            modelBuilder.Entity("VBL.Data.UserEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsPrimary");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsVerified");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("VBL.Data.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Message");

                    b.Property<string>("OnClick");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Seen");

                    b.Property<int>("UserId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("VBL.Data.UserPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsPrimary");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsSMS");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("Number");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VBL.Data.ApplicationUser", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.Location", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.Organization", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.OrganizationLocation", b =>
                {
                    b.HasOne("VBL.Data.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.OrganizationMember", b =>
                {
                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany("OrganizationMembers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("OrganizationMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.OrganizationPhoto", b =>
                {
                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany("Photos")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserModifiedId");
                });

            modelBuilder.Entity("VBL.Data.OrganizationTournamentDefaults", b =>
                {
                    b.HasOne("VBL.Data.Organization")
                        .WithOne("TournamentDefaults")
                        .HasForeignKey("VBL.Data.OrganizationTournamentDefaults", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserModifiedId");
                });

            modelBuilder.Entity("VBL.Data.PayPalPaymentResponse", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.PayPalToken", b =>
                {
                    b.HasOne("VBL.Data.PayPalTransaction", "PayPalTransaction")
                        .WithMany("Tokens")
                        .HasForeignKey("PayPalTransactionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.PayPalTransaction", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.PlayerProfile", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.PointValue", b =>
                {
                    b.HasOne("VBL.Data.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.PointValueMultiplier", b =>
                {
                    b.HasOne("VBL.Data.TournamentTeamMember", "TournamentTeamMember")
                        .WithMany("Multipliers")
                        .HasForeignKey("TournamentTeamMemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.SanctioningBody", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.SparkPostEmailTemplate", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.StripeAccountDetails", b =>
                {
                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("VBL.Data.StripeAuthToken", "StripeAuthToken")
                        .WithOne("AccountDetails")
                        .HasForeignKey("VBL.Data.StripeAccountDetails", "StripeAuthTokenId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.StripeAuthToken", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.StripeConnectClick", b =>
                {
                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.StripeAuthToken", "StripeAuthToken")
                        .WithMany()
                        .HasForeignKey("StripeAuthTokenId");

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TeamCountMultiplier", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.Tournament", b =>
                {
                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.SanctioningBody", "SanctioningBody")
                        .WithMany()
                        .HasForeignKey("SanctioningBodyId");

                    b.HasOne("VBL.Data.SparkPostEmailTemplate", "SparkPostEmailTemplate")
                        .WithMany()
                        .HasForeignKey("SparkPostEmailTemplateId");

                    b.HasOne("VBL.Data.ApplicationUser", "TournamentDirector")
                        .WithMany()
                        .HasForeignKey("TournamentDirectorUserId");

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentDay", b =>
                {
                    b.HasOne("VBL.Data.TournamentDivision", "TournamentDivision")
                        .WithMany("Days")
                        .HasForeignKey("TournamentDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentDivision", b =>
                {
                    b.HasOne("VBL.Data.AgeType", "AgeType")
                        .WithMany()
                        .HasForeignKey("AgeTypeId");

                    b.HasOne("VBL.Data.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("VBL.Data.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("VBL.Data.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("VBL.Data.SparkPostEmailTemplate", "SparkPostEmailTemplate")
                        .WithMany()
                        .HasForeignKey("SparkPostEmailTemplateId");

                    b.HasOne("VBL.Data.ApplicationUser", "TournamentDirector")
                        .WithMany()
                        .HasForeignKey("TournamentDirectorUserId");

                    b.HasOne("VBL.Data.Tournament", "Tournament")
                        .WithMany("Divisions")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistration", b =>
                {
                    b.HasOne("VBL.Data.TournamentDivision", "TournamentDivision")
                        .WithMany()
                        .HasForeignKey("TournamentDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationEmail", b =>
                {
                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.TournamentDivision", "TournamentDivision")
                        .WithMany()
                        .HasForeignKey("TournamentDivisionId");

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationInfo", b =>
                {
                    b.HasOne("VBL.Data.TournamentDivision")
                        .WithOne("RegistrationFields")
                        .HasForeignKey("VBL.Data.TournamentRegistrationInfo", "TournamentDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationPlayer", b =>
                {
                    b.HasOne("VBL.Data.PlayerProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("PlayerProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.TournamentRegistration")
                        .WithMany("Players")
                        .HasForeignKey("TournamentRegistrationId");

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationWindow", b =>
                {
                    b.HasOne("VBL.Data.TournamentDivision")
                        .WithMany("RegistrationWindows")
                        .HasForeignKey("TournamentDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentTeam", b =>
                {
                    b.HasOne("VBL.Data.TournamentDivision", "TournamentDivision")
                        .WithMany("Teams")
                        .HasForeignKey("TournamentDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.TournamentRegistration", "TournamentRegistration")
                        .WithOne("TournamentTeam")
                        .HasForeignKey("VBL.Data.TournamentTeam", "TournamentRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentTeamMember", b =>
                {
                    b.HasOne("VBL.Data.PlayerProfile", "PlayerProfile")
                        .WithMany()
                        .HasForeignKey("PlayerProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.TournamentTeam", "TournamentTeam")
                        .WithMany("Players")
                        .HasForeignKey("TournamentTeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.UserEmail", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("UserEmails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.UserNotification", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.UserPhone", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("UserPhones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });
#pragma warning restore 612, 618
        }
    }
}
