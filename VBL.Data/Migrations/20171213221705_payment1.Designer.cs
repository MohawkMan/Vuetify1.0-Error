// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using VBL.Data;

namespace VBL.Data.Migrations
{
    [DbContext(typeof(VBLDbContext))]
    [Migration("20171213221705_payment1")]
    partial class payment1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("ProviderKey");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("ProviderKey", "LoginProvider");

                    b.HasAlternateKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasAlternateKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("VBL.Data.AgeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AgeTypes");
                });

            modelBuilder.Entity("VBL.Data.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("VBL.Data.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("Dob");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastLoginProvider");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RegistrationProvider");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VBL.Data.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgeTypeId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.Property<byte>("Order");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("VBL.Data.Email", b =>
                {
                    b.Property<string>("Address")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsVerified");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Address");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("VBL.Data.EmailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("FromEmailAddress");

                    b.Property<int?>("FromEmailId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Subject");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("FromEmailAddress");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("EmailMessages");
                });

            modelBuilder.Entity("VBL.Data.FacebookProfile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("FacebookProfiles");
                });

            modelBuilder.Entity("VBL.Data.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgeTypeId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.Property<byte>("Order");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("VBL.Data.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("VBL.Data.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("VBL.Data.OrganizationLocation", b =>
                {
                    b.Property<int>("OrganizationId");

                    b.Property<int>("LocationId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("OrganizationId", "LocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("OrganizationLocations");
                });

            modelBuilder.Entity("VBL.Data.OrganizationMember", b =>
                {
                    b.Property<int>("OrganizationId");

                    b.Property<int>("UserId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Role");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("OrganizationId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("OrganizationMembers");
                });

            modelBuilder.Entity("VBL.Data.Phone", b =>
                {
                    b.Property<string>("Number")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsSMS");

                    b.Property<bool>("IsVerified");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Number");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("VBL.Data.SanctioningBody", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("SanctioningBodies");
                });

            modelBuilder.Entity("VBL.Data.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsOrganizationApproved");

                    b.Property<bool>("IsPublic");

                    b.Property<bool>("IsSanctioningBodyApproved");

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("SanctioningBodyId");

                    b.Property<int>("StatusId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SanctioningBodyId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("VBL.Data.TournamentDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckInTime");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("PlayTime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TournamentDivisionId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("TournamentDivisionId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentDays");
                });

            modelBuilder.Entity("VBL.Data.TournamentDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AgeTypeId");

                    b.Property<int?>("DivisionId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<int?>("GenderId");

                    b.Property<string>("Info");

                    b.Property<bool>("IsSanctioningBodyApproved");

                    b.Property<int?>("LocationId");

                    b.Property<int?>("MaxTeams");

                    b.Property<int?>("MinTeams");

                    b.Property<byte>("NumAllowedOnRoster");

                    b.Property<byte>("NumOfPlayers");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("SanctioningBodyId");

                    b.Property<int>("TournamentId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("AgeTypeId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentDivisions");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<int>("EmailMessageId");

                    b.Property<string>("FromEmailAddress");

                    b.Property<int?>("FromEmailId");

                    b.Property<bool>("IsDefault");

                    b.Property<int>("OrganizationId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("TournamentDivisionId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("EmailMessageId");

                    b.HasIndex("FromEmailAddress");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("TournamentDivisionId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentRegistrationEmails");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Fields");

                    b.Property<string>("RequiredFields");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TournamentDivisionId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentRegistrationInfo");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationWindow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanPayAtEvent");

                    b.Property<bool>("CanProcessPayment");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtEnd");

                    b.Property<DateTime?>("DtModified");

                    b.Property<DateTime?>("DtStart");

                    b.Property<double>("Fee");

                    b.Property<bool>("FeeIsPerTeam");

                    b.Property<bool>("IsEarly");

                    b.Property<bool>("IsLate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TournamentDivisionId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("TournamentDivisionId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentRegistrationWindows");
                });

            modelBuilder.Entity("VBL.Data.TournamentTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<int?>("Finish");

                    b.Property<string>("Name");

                    b.Property<double?>("Points");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("Seed");

                    b.Property<int>("TournamentDivisionId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("TournamentDivisionId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentTeam");
                });

            modelBuilder.Entity("VBL.Data.TournamentTeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<DateTime?>("PointLockDt");

                    b.Property<double?>("Points");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TournamentTeamId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("TournamentTeamId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("TournamentTeamMember");
                });

            modelBuilder.Entity("VBL.Data.UserEmail", b =>
                {
                    b.Property<string>("EmailId");

                    b.Property<int>("UserId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsPublic");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("EmailId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("VBL.Data.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<string>("Message");

                    b.Property<string>("OnClick");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Seen");

                    b.Property<int>("UserId");

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("VBL.Data.UserPhone", b =>
                {
                    b.Property<string>("PhoneId");

                    b.Property<int>("UserId");

                    b.Property<DateTime?>("DtCreated");

                    b.Property<DateTime?>("DtModified");

                    b.Property<bool>("IsPublic");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UserIdCreated");

                    b.Property<int?>("UserIdModified");

                    b.HasKey("PhoneId", "UserId");

                    b.HasIndex("PhoneId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("UserIdCreated");

                    b.HasIndex("UserIdModified");

                    b.ToTable("UserPhones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VBL.Data.ApplicationUser", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.Email", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.EmailMessage", b =>
                {
                    b.HasOne("VBL.Data.Email", "FromEmail")
                        .WithMany()
                        .HasForeignKey("FromEmailAddress");

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.Location", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.Organization", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.OrganizationLocation", b =>
                {
                    b.HasOne("VBL.Data.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.OrganizationMember", b =>
                {
                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany("OrganizationMembers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("OrganizationMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.Phone", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.SanctioningBody", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.Tournament", b =>
                {
                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.SanctioningBody", "SanctioningBody")
                        .WithMany()
                        .HasForeignKey("SanctioningBodyId");

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentDay", b =>
                {
                    b.HasOne("VBL.Data.TournamentDivision", "TournamentDivision")
                        .WithMany("Days")
                        .HasForeignKey("TournamentDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentDivision", b =>
                {
                    b.HasOne("VBL.Data.AgeType", "AgeType")
                        .WithMany()
                        .HasForeignKey("AgeTypeId");

                    b.HasOne("VBL.Data.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("VBL.Data.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("VBL.Data.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("VBL.Data.Tournament", "Tournament")
                        .WithMany("Divisions")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationEmail", b =>
                {
                    b.HasOne("VBL.Data.EmailMessage", "EmailMessage")
                        .WithMany()
                        .HasForeignKey("EmailMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.Email", "FromEmail")
                        .WithMany()
                        .HasForeignKey("FromEmailAddress");

                    b.HasOne("VBL.Data.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.TournamentDivision", "TournamentDivision")
                        .WithMany()
                        .HasForeignKey("TournamentDivisionId");

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationInfo", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentRegistrationWindow", b =>
                {
                    b.HasOne("VBL.Data.TournamentDivision")
                        .WithMany("RegistrationWindows")
                        .HasForeignKey("TournamentDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentTeam", b =>
                {
                    b.HasOne("VBL.Data.TournamentDivision", "TournamentDivision")
                        .WithMany("Teams")
                        .HasForeignKey("TournamentDivisionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.TournamentTeamMember", b =>
                {
                    b.HasOne("VBL.Data.TournamentTeam")
                        .WithMany("Players")
                        .HasForeignKey("TournamentTeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.UserEmail", b =>
                {
                    b.HasOne("VBL.Data.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("UserEmails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.UserNotification", b =>
                {
                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });

            modelBuilder.Entity("VBL.Data.UserPhone", b =>
                {
                    b.HasOne("VBL.Data.Phone", "Phone")
                        .WithOne("UserPhone")
                        .HasForeignKey("VBL.Data.UserPhone", "PhoneId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "User")
                        .WithMany("UserPhones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VBL.Data.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserIdCreated");

                    b.HasOne("VBL.Data.ApplicationUser", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserIdModified");
                });
#pragma warning restore 612, 618
        }
    }
}
